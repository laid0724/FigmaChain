<!-- HTML code for the language selector component -->
<div class="language-selector" [ngClass]="{'dark-mode': isDarkMode}">
  <div class="selector-circle" (click)="toggleMenu()">
    <div class="selected-language">
      <img src="{{selectedLanguage.flag}}" alt="{{selectedLanguage.name}}">
      <span>{{selectedLanguage.name}}</span>
    </div>
    <div class="arrow-icon"></div>
  </div>
  <div class="language-menu" [ngClass]="{'expanded': isMenuOpen}">
    <ul>
      <li *ngFor="let language of languages" (click)="selectLanguage(language)" (mouseenter)="hoverLanguage(language)" (mouseleave)="unhoverLanguage()">
        <img src="{{language.flag}}" alt="{{language.name}}">
        <span>{{language.name}}</span>
      </li>
    </ul>
  </div>
</div>

<!-- CSS code for the language selector component -->
.language-selector {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  z-index: 1;
}

.selector-circle {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background-color: #fff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  cursor: pointer;
}

.selected-language {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  position: relative;
}

.selected-language img {
  width: 20px;
  height: 20px;
  margin-right: 5px;
}

.arrow-icon {
  width: 0;
  height: 0;
  border-top: 6px solid #000;
  border-right: 6px solid transparent;
  border-left: 6px solid transparent;
  position: absolute;
  bottom: -3px;
}

.language-menu {
  display: none;
  position: absolute;
  top: 50px;
  left: 50%;
  transform: translateX(-50%);
  z-index: 2;
  background-color: #fff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border-radius: 4px;
  overflow: hidden;
}

.language-menu.expanded {
  display: block;
}

.language-menu ul {
  list-style: none;
  margin: 0;
  padding: 0;
}

.language-menu li {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  padding: 10px;
  cursor: pointer;
}

.language-menu li:hover {
  background-color: #f5f5f5;
}

.language-menu li img {
  width: 20px;
  height: 20px;
  margin-right: 5px;
}

/* Dark mode */
.language-selector.dark-mode .selector-circle {
  background-color: #333;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.language-selector.dark-mode .selected-language span {
  color: #fff;
}

.language-selector.dark-mode .arrow-icon {
  border-top: 6px solid #fff;
}

.language-selector.dark-mode .language-menu {
  background-color: #333;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.language-selector.dark-mode .language-menu li:hover {
  background-color: #444;
}

/* Mobile mode */
@media (max-width: 767px) {
  .language-selector {
    flex-direction: column;
  }

  .selector-circle {
    margin-bottom: 10px;
  }

  .selected-language {
    flex-direction: column;
  }

  .selected-language img {
    margin-right: 0;
    margin-bottom: 5px;
  }

  .arrow-icon {
    display: none;
  }

  .language-menu {
    top: 40px;
  }
}

<!-- TypeScript code for the language selector component -->
import { Component, Input } from '@angular/core';

interface Language {
  name: string;
  flag: string;
}

@Component({
  selector: 'app-language-selector',
  templateUrl: './language-selector.component.html',
  styleUrls: ['./language-selector.component.css']
})
export class LanguageSelectorComponent {
  @Input() isDarkMode: boolean = false;
  languages: Language[] = [
    { name: 'English', flag: 'assets/flags/en.png' },
    { name: 'Japanese', flag: 'assets/flags/jp.png' },
    { name: 'Simplified Chinese', flag: 'assets/flags/cn.png' }
  ];
  selectedLanguage: Language = this.languages[0];
  isMenuOpen: boolean = false;

  toggleMenu() {
    this.isMenuOpen = !this.isMenuOpen;
  }

  selectLanguage(language: Language) {
    this.selectedLanguage = language;
    this.isMenuOpen = false;
  }

  hoverLanguage(language: Language) {
    language.hovered = true;
  }

  unhoverLanguage() {
    this.languages.forEach(language => language.hovered = false);
  }
}